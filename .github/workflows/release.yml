name: 编译发布

# 仅在创建新 tag 时触发
on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v3

      # 设置 Python 环境
      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # 安装依赖
      - name: 安装依赖
        run: |
          pip install paramiko
          pip install pyinstaller

      # 打包成可执行文件
      - name: 编译打包
        run: |
          pyinstaller --onefile main.py  # 替换为你的 Python 脚本文件名
        shell: bash

      # 在 Ubuntu 上执行构建后的操作
      - name: Linux打包
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Linux打包
          path: ./dist/linux-关IPv6防火墙  # 替换为 PyInstaller 生成的可执行文件路径

      # 在 Windows 上执行构建后的操作
      - name: Windows打包
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Windows打包
          path: ./dist/windows-关IPv6防火墙.exe  # 替换为 PyInstaller 生成的可执行文件路径

      # 创建 Release 并上传所有构建产物
      - name: 创建release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      # 上传构建文件到 Release
      - name: 上传文件到release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/  # 上传 PyInstaller 打包的文件
          asset_name: your_script_${{ matrix.os }}  # 区分不同平台的构建产物
          asset_content_type: application/octet-stream
